"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _path = _interopRequireDefault(require("path"));

var _webpackConfig = require("webpack-config");

var _escapeStringRegexp = _interopRequireDefault(require("escape-string-regexp"));

var _util = require("../util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PL_JS_DIR = 'project-light/javascripts';

var PL_LIB_DIR = _path.default.join(PL_JS_DIR, 'libs');

function bowerTestRegex(location) {
  return new RegExp((0, _escapeStringRegexp.default)(_path.default.join('/', location)) + '$');
}

function _default() {
  var projectLight = _path.default.join(PL_JS_DIR, 'custom.js');

  var modernizr = _path.default.join(PL_LIB_DIR, 'modernizr.js');

  var iosFix = _path.default.join(PL_LIB_DIR, 'ios-orientationchange-fix.js');

  return new _webpackConfig.Config().merge({
    resolve: {
      alias: {
        modernizr: modernizr,
        'ios-orientation-zoom-bug-fix': iosFix
      }
    },
    module: {
      rules: [// Shim the project light JS as a commonjs module
      {
        test: bowerTestRegex(projectLight),
        loader: 'imports-loader?' + ['__1=jquery-migrate', '__2=ios-orientation-zoom-bug-fix'].join(',')
      }, // Shim modernizr as a commonjs module
      {
        test: bowerTestRegex(modernizr),
        use: ['imports-loader?this=>global', 'exports-loader?Modernizr']
      }, // Shim the ios rotate fix script
      {
        test: bowerTestRegex(iosFix),
        loader: 'imports-loader?this=>global'
      }]
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zaGltcy9wcm9qZWN0bGlnaHQuanMiXSwibmFtZXMiOlsiUExfSlNfRElSIiwiUExfTElCX0RJUiIsInBhdGgiLCJqb2luIiwiYm93ZXJUZXN0UmVnZXgiLCJsb2NhdGlvbiIsIlJlZ0V4cCIsInByb2plY3RMaWdodCIsIm1vZGVybml6ciIsImlvc0ZpeCIsIkNvbmZpZyIsIm1lcmdlIiwicmVzb2x2ZSIsImFsaWFzIiwibW9kdWxlIiwicnVsZXMiLCJ0ZXN0IiwibG9hZGVyIiwidXNlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBRUE7O0FBQ0E7O0FBRUE7Ozs7QUFHQSxJQUFNQSxTQUFTLEdBQUcsMkJBQWxCOztBQUNBLElBQU1DLFVBQVUsR0FBR0MsY0FBS0MsSUFBTCxDQUFVSCxTQUFWLEVBQXFCLE1BQXJCLENBQW5COztBQUVBLFNBQVNJLGNBQVQsQ0FBd0JDLFFBQXhCLEVBQWtDO0FBQzlCLFNBQU8sSUFBSUMsTUFBSixDQUFXLGlDQUFZSixjQUFLQyxJQUFMLENBQVUsR0FBVixFQUFlRSxRQUFmLENBQVosSUFBd0MsR0FBbkQsQ0FBUDtBQUNIOztBQUVjLG9CQUFXO0FBQ3RCLE1BQUlFLFlBQVksR0FBR0wsY0FBS0MsSUFBTCxDQUFVSCxTQUFWLEVBQXFCLFdBQXJCLENBQW5COztBQUNBLE1BQUlRLFNBQVMsR0FBR04sY0FBS0MsSUFBTCxDQUFVRixVQUFWLEVBQXNCLGNBQXRCLENBQWhCOztBQUNBLE1BQUlRLE1BQU0sR0FBR1AsY0FBS0MsSUFBTCxDQUFVRixVQUFWLEVBQXNCLDhCQUF0QixDQUFiOztBQUVBLFNBQU8sSUFBSVMscUJBQUosR0FBYUMsS0FBYixDQUFtQjtBQUN0QkMsSUFBQUEsT0FBTyxFQUFFO0FBQ0xDLE1BQUFBLEtBQUssRUFBRTtBQUNITCxRQUFBQSxTQUFTLEVBQUVBLFNBRFI7QUFFSCx3Q0FBZ0NDO0FBRjdCO0FBREYsS0FEYTtBQU90QkssSUFBQUEsTUFBTSxFQUFFO0FBQ0pDLE1BQUFBLEtBQUssRUFBRSxDQUNIO0FBQ0E7QUFDSUMsUUFBQUEsSUFBSSxFQUFFWixjQUFjLENBQUNHLFlBQUQsQ0FEeEI7QUFFSVUsUUFBQUEsTUFBTSxFQUFDLG9CQUFxQixDQUN4QixvQkFEd0IsRUFFeEIsa0NBRndCLEVBRzFCZCxJQUgwQixDQUdyQixHQUhxQjtBQUZoQyxPQUZHLEVBU0g7QUFDQTtBQUNJYSxRQUFBQSxJQUFJLEVBQUVaLGNBQWMsQ0FBQ0ksU0FBRCxDQUR4QjtBQUVJVSxRQUFBQSxHQUFHLEVBQUUsQ0FDRCw2QkFEQyxFQUVELDBCQUZDO0FBRlQsT0FWRyxFQWlCSDtBQUNBO0FBQ0lGLFFBQUFBLElBQUksRUFBRVosY0FBYyxDQUFDSyxNQUFELENBRHhCO0FBRUlRLFFBQUFBLE1BQU0sRUFBRTtBQUZaLE9BbEJHO0FBREg7QUFQYyxHQUFuQixDQUFQO0FBaUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5cbmltcG9ydCB7IENvbmZpZyB9IGZyb20gJ3dlYnBhY2stY29uZmlnJztcbmltcG9ydCBlc2NhcGVSZWdleCBmcm9tICdlc2NhcGUtc3RyaW5nLXJlZ2V4cCc7XG5cbmltcG9ydCB7IHJ1bGUgfSBmcm9tICcuLi91dGlsJztcblxuXG5jb25zdCBQTF9KU19ESVIgPSAncHJvamVjdC1saWdodC9qYXZhc2NyaXB0cyc7XG5jb25zdCBQTF9MSUJfRElSID0gcGF0aC5qb2luKFBMX0pTX0RJUiwgJ2xpYnMnKTtcblxuZnVuY3Rpb24gYm93ZXJUZXN0UmVnZXgobG9jYXRpb24pIHtcbiAgICByZXR1cm4gbmV3IFJlZ0V4cChlc2NhcGVSZWdleChwYXRoLmpvaW4oJy8nLCBsb2NhdGlvbikpICsgJyQnKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gICAgbGV0IHByb2plY3RMaWdodCA9IHBhdGguam9pbihQTF9KU19ESVIsICdjdXN0b20uanMnKVxuICAgIGxldCBtb2Rlcm5penIgPSBwYXRoLmpvaW4oUExfTElCX0RJUiwgJ21vZGVybml6ci5qcycpO1xuICAgIGxldCBpb3NGaXggPSBwYXRoLmpvaW4oUExfTElCX0RJUiwgJ2lvcy1vcmllbnRhdGlvbmNoYW5nZS1maXguanMnKTtcblxuICAgIHJldHVybiBuZXcgQ29uZmlnKCkubWVyZ2Uoe1xuICAgICAgICByZXNvbHZlOiB7XG4gICAgICAgICAgICBhbGlhczoge1xuICAgICAgICAgICAgICAgIG1vZGVybml6cjogbW9kZXJuaXpyLFxuICAgICAgICAgICAgICAgICdpb3Mtb3JpZW50YXRpb24tem9vbS1idWctZml4JzogaW9zRml4LFxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtb2R1bGU6IHtcbiAgICAgICAgICAgIHJ1bGVzOiBbXG4gICAgICAgICAgICAgICAgLy8gU2hpbSB0aGUgcHJvamVjdCBsaWdodCBKUyBhcyBhIGNvbW1vbmpzIG1vZHVsZVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdGVzdDogYm93ZXJUZXN0UmVnZXgocHJvamVjdExpZ2h0KSxcbiAgICAgICAgICAgICAgICAgICAgbG9hZGVyOidpbXBvcnRzLWxvYWRlcj8nICArIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICdfXzE9anF1ZXJ5LW1pZ3JhdGUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ19fMj1pb3Mtb3JpZW50YXRpb24tem9vbS1idWctZml4J1xuICAgICAgICAgICAgICAgICAgICBdLmpvaW4oJywnKVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgLy8gU2hpbSBtb2Rlcm5penIgYXMgYSBjb21tb25qcyBtb2R1bGVcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHRlc3Q6IGJvd2VyVGVzdFJlZ2V4KG1vZGVybml6ciksXG4gICAgICAgICAgICAgICAgICAgIHVzZTogW1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2ltcG9ydHMtbG9hZGVyP3RoaXM9Pmdsb2JhbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAnZXhwb3J0cy1sb2FkZXI/TW9kZXJuaXpyJ1xuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAvLyBTaGltIHRoZSBpb3Mgcm90YXRlIGZpeCBzY3JpcHRcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHRlc3Q6IGJvd2VyVGVzdFJlZ2V4KGlvc0ZpeCksXG4gICAgICAgICAgICAgICAgICAgIGxvYWRlcjogJ2ltcG9ydHMtbG9hZGVyP3RoaXM9Pmdsb2JhbCdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICB9KTtcbn1cbiJdfQ==